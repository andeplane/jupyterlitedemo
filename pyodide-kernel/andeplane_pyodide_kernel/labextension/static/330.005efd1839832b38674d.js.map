{"version":3,"file":"330.005efd1839832b38674d.js?v=005efd1839832b38674d","mappings":"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","sources":["webpack://andeplane-pyodide-kernel-extension/../pyodide-kernel/lib/kernel.js"],"sourcesContent":["import { PromiseDelegate } from '@lumino/coreutils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { BaseKernel } from '@jupyterlite/kernel';\nimport { wrap } from 'comlink';\nimport { allJSONUrl, pipliteWheelUrl } from './_pypi';\nimport mixpanel from 'mixpanel-browser';\nmixpanel.init('fb25742efb56d116b736515a0ad5f6ef', { debug: false });\n/**\n * A kernel that executes Python code with Pyodide.\n */\nexport class PyodideKernel extends BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        super(options);\n        this._ready = new PromiseDelegate();\n        this._worker = this.initWorker(options);\n        this._worker.onmessage = (e) => this._processWorkerMessage(e.data);\n        this._remoteKernel = wrap(this._worker);\n        this.initRemote(options);\n        // Cognite auth\n        // initTokenStorageAndAuthHandler();\n    }\n    /**\n     * Load the worker.\n     *\n     * ### Note\n     *\n     * Subclasses must implement this typographically almost _exactly_ for\n     * webpack to find it.\n     */\n    initWorker(options) {\n        return new Worker(new URL('./comlink.worker.js', import.meta.url), {\n            type: 'module',\n        });\n    }\n    async initRemote(options) {\n        const remoteOptions = this.initRemoteOptions(options);\n        await this._remoteKernel.initialize(remoteOptions);\n        this._ready.resolve();\n    }\n    initRemoteOptions(options) {\n        const { pyodideUrl } = options;\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const baseUrl = PageConfig.getBaseUrl();\n        const pipliteUrls = [...(options.pipliteUrls || []), allJSONUrl.default];\n        const disablePyPIFallback = !!options.disablePyPIFallback;\n        return {\n            baseUrl,\n            pyodideUrl,\n            indexUrl,\n            pipliteWheelUrl: options.pipliteWheelUrl || pipliteWheelUrl.default,\n            pipliteUrls,\n            disablePyPIFallback,\n            location: this.location,\n            mountDrive: options.mountDrive,\n        };\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._worker.terminate();\n        this._worker = null;\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!msg.type) {\n            return;\n        }\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle, msg.parentHeader);\n                break;\n            }\n            case 'input_request': {\n                const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : { prompt: '', password: false };\n                this.inputRequest(bundle, msg.parentHeader);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { wait: false };\n                this.clearOutput(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : {\n                    execution_count: 0,\n                    data: {},\n                    metadata: {},\n                };\n                this.publishExecuteResult(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : { ename: '', evalue: '', traceback: [] };\n                this.publishExecuteError(bundle, msg.parentHeader);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers, msg.parentHeader);\n                break;\n            }\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3,\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8',\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org',\n                },\n            ],\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        await this.ready;\n        const result = await this._remoteKernel.execute(content, this.parent);\n        result.execution_count = this.executionCount;\n        return result;\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._remoteKernel.complete(content, this.parent);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        return await this._remoteKernel.inspect(content, this.parent);\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        return await this._remoteKernel.isComplete(content, this.parent);\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._remoteKernel.commInfo(content, this.parent);\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._remoteKernel.commOpen(msg, this.parent);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._remoteKernel.commMsg(msg, this.parent);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._remoteKernel.commClose(msg, this.parent);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    async inputReply(content) {\n        return await this._remoteKernel.inputReply(content, this.parent);\n    }\n}\n// const initTokenStorageAndAuthHandler = () => {\n//   // todo need destroyer when unmounting\n//   window.addEventListener(\n//     'message',\n//     (event) => {\n//       if ('token' in event.data && 'baseUrl' in event.data && 'project' in event.data) {\n//         storeToken(event.data);\n//       }\n//     },\n//     false\n//   );\n//   // communicate if in iframe to parent (top)\n//   if (window.top) {\n//     window.top.postMessage('getToken', '*');\n//   }\n// };\n// const storeToken = ({\n//   token,\n//   baseUrl,\n//   project,\n//   email,\n// }: {\n//   token: string;\n//   baseUrl: string;\n//   project: string;\n//   email?: string;\n// }) => {\n//   mixpanel.track('DSHubLite.initKernel', { baseUrl, project, distinct_id: email });\n//   // Open (or create) the database\n//   const open = indexedDB.open('CogniteVault', 1);\n//   // Create the schema\n//   open.onupgradeneeded = function () {\n//     const db = open.result;\n//     db.createObjectStore('TokenStore', { keyPath: 'id' });\n//   };\n//   open.onsuccess = async function () {\n//     console.log('success');\n//     // Start a new transaction\n//     const db = open.result;\n//     const tx = db.transaction('TokenStore', 'readwrite');\n//     const store = tx.objectStore('TokenStore');\n//     // Add token data\n//     store.put({ id: 'token', value: token });\n//     store.put({ id: 'baseUrl', value: baseUrl });\n//     store.put({ id: 'project', value: project });\n//     // Close the db when the transaction is done\n//     tx.oncomplete = function () {\n//       db.close();\n//     };\n//   };\n// };\n"],"names":["debug","PyodideKernel","BaseKernel","constructor","options","super","this","_ready","PromiseDelegate","_worker","initWorker","onmessage","e","_processWorkerMessage","data","_remoteKernel","initRemote","Worker","URL","type","async","remoteOptions","initRemoteOptions","initialize","resolve","pyodideUrl","indexUrl","slice","lastIndexOf","baseUrl","PageConfig","pipliteUrls","disablePyPIFallback","pipliteWheelUrl","location","mountDrive","dispose","isDisposed","terminate","ready","promise","msg","_a","_b","_c","_d","_e","_f","_g","bundle","name","text","stream","parentHeader","content","prompt","password","inputRequest","metadata","transient","displayData","updateDisplayData","wait","clearOutput","execution_count","publishExecuteResult","ename","evalue","traceback","publishExecuteError","handleComm","buffers","implementation","implementation_version","language_info","codemirror_mode","version","file_extension","mimetype","nbconvert_exporter","pygments_lexer","protocol_version","status","banner","help_links","url","result","execute","parent","executionCount","complete","inspect","isComplete","commInfo","commOpen","commMsg","commClose","inputReply"],"sourceRoot":""}